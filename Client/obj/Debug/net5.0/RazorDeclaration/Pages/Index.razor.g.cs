// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace jVision.Client.Pages
{
    #line hidden
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using jVision.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\natha\source\repos\jVision\Client\_Imports.razor"
using jVision.Client.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\natha\source\repos\jVision\Client\Pages\Index.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\natha\source\repos\jVision\Client\Pages\Index.razor"
using jVision.Shared.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\natha\source\repos\jVision\Client\Pages\Index.razor"
using jVision.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\natha\source\repos\jVision\Client\Pages\Index.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\natha\source\repos\jVision\Client\Pages\Index.razor"
using Microsoft.AspNetCore.SignalR.Client;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\natha\source\repos\jVision\Client\Pages\Index.razor"
using BlazorTable;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 181 "C:\Users\natha\source\repos\jVision\Client\Pages\Index.razor"
       
    [Inject] public HttpClient Http { get; set; }

    //private List<int> identifiers = new List<int>();
    private Dictionary<int, ModalDialog> myModals = new Dictionary<int, ModalDialog>();
    private HubConnection hubConnection;
    //searchtext
    private string _searchText = "";
    //dropdown
    private SearchTypes _searchType = SearchTypes.Contains;
    private SearchCategory _searchCategory = SearchCategory.Port;
    private string _subnetSelection = "all";


    private enum SearchCategory
    {
        Port,
        Name,
        Script,
        Version,
        Os
    }
    private enum SearchTypes
    {
        Contains,
        Match
    }

    //dialog
    private ModalDialog _dialog;
    private int bCount => boxes.Count();
    private string _overlayColor = "128,128,128";
    private double _overlayOpacity = 50;
    private double _modalHeight = 0;
    private double _modalWitdth = 500;
    private double _modalMinHeight = 100;
    private double _modalMinWitdth = 100;
    private bool _modalAnimate = true;
    private bool _modalCloseOnClick = true;
    private bool _modalCloseOnEsc = true;
    private bool _modalFocus = true;
    private bool _modalCentered = true;
    private bool _modalShowClose = true;
    private string _modalTitle = "Edit Box";
    private string _yourName;

    //Collapse

    private string _collapsedColor = "DodgerBlue";
    private string _expandedColor = "LightBlue";
    private string _hoverColor = "LightGray";
    private bool _isAnimated = false;
    private bool _isCollapseDisabled = false;
    private bool _isCollapsed = false;
    private bool _showOverflow = false;
    private int _height = 200;

    //Accordion
    private string _accordionCollapsedColor = "green";
    private string _accordionExpandedColor = "lightGreen";
    private string _accordionHoverColor = "lime";
    private bool _isAccordionDisabled = false;
    private int _collapseCount;

    private Accordion _accordion;
    private CollapsePanel? _activePanel;
    private IList<BoxDTO> boxes = new List<BoxDTO>();
    private List<string> users = new List<string>();
    private List<string> _subnets => boxes.Where(x => x.Subnet != null).Select(s => s.Subnet).Distinct().ToList();
    // private IList<BoxDTO> filteredBoxes = new List<BoxDTO>();
    //private IList<BoxDTO> filteredBoxes = new List<BoxDTO>();
    //private IList<ServiceDTO> services = new List<ServiceDTO>();
    private IList<BoxDTO> boxesAdded = new List<BoxDTO>();
    private IList<ServiceDTO> servicesAdded = new List<ServiceDTO>();
    private IList<BoxDTO> filteredBoxes = new List<BoxDTO>();

    private string error;
    private string requestUri = "Box";
    private string userUri = "User";
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/boxhub")).Build();
        await hubConnection.StartAsync();

        try
        {
            boxes = await Http.GetFromJsonAsync<IList<BoxDTO>>(requestUri);
            //fix the ordering here
            boxes = boxes.Where(o=>o.Ip != null).OrderBy(i=>Version.Parse(i.Ip)).ToList();
            users = await Http.GetFromJsonAsync<List<string>>(userUri);
            filteredBoxes = new List<BoxDTO>(boxes);

            //identifiers = boxes.Select(s => s.BoxId).ToList();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            error = "Error Encountered";
        };
        hubConnection.On<BoxDTO>("BoxUpdated", t =>
        {
            BoxDTO updatedBox = boxes.Where(s => s.BoxId == t.BoxId).FirstOrDefault();
            boxes[boxes.IndexOf(updatedBox)] = t;
            Search();
        });
        hubConnection.On<string>("BoxAdded", async t =>
        {
            boxes = await Http.GetFromJsonAsync<IList<BoxDTO>>(requestUri);
            //fix the ordering here
            boxes = boxes.OrderBy(o => o.Ip).ToList();
            Search();
        });
        hubConnection.On<string>("UserAdded", async t =>
        {
            users = await Http.GetFromJsonAsync<List<string>>(userUri);
            StateHasChanged();
        });
    }








    //s => s.Services
    //.Where(p => p.Port.ToString().Contains(_searchText)).ToList())
    //.ToList();

    private void OnCollapsed(bool state)
    {
        _isCollapsed = state;
    }

    private async Task OpenDialog(BoxDTO b, List<string> u)
    {
        await _dialog.Open(b, u);
    }

    private async Task HVS(BoxDTO bb)
    {
        var response = await Http.PutAsJsonAsync(requestUri, bb);
        await _dialog.Close();
    }
    private async Task CloseDialog()
    {
        await _dialog.Close();
    }

    private async Task AddBox()
    {
        ServiceDTO newService = new ServiceDTO
        {
            Port = 69,
            State = false,
            Name = null,
            Version = null,
            Script = "ooo"
        };
        servicesAdded.Add(newService);
        servicesAdded.Add(newService);
        BoxDTO newBox = new BoxDTO
        {
            Ip = "192.168.1.1",
            UserName = "jbrick123",
            Hostname = "Hostname",
            State = false,
            Comments = "none",
            Standing = "Unrelated",
            Os = "Windows",
            Cidr = "/24",
            Services = servicesAdded,
            Subnet = "192.168.1.0/24"
        };
        boxesAdded.Add(newBox);
        var response = await Http.PostAsJsonAsync(requestUri, boxesAdded);
        Console.WriteLine(response);

    }

    private void ResetFilters()
    {
        _searchText = "";
        _searchCategory = SearchCategory.Port;
        _searchType = SearchTypes.Contains;
        _subnetSelection = "all";
        Search();
    }

    private void OnInput()
    {
        Console.WriteLine("test");
    }
    private void UpdateSearchText(ChangeEventArgs args)
    {
        _searchText = args.Value.ToString();
        Search();
    }

    private void UpdateCategory(ChangeEventArgs args)
    {
        _searchCategory = (SearchCategory)Enum.Parse(typeof(SearchCategory), args.Value.ToString(), true);
        Search();
    }

    private void UpdateType(ChangeEventArgs args)
    {
        _searchType = (SearchTypes)Enum.Parse(typeof(SearchTypes), args.Value.ToString(), true);
        Search();
    }
    private void UpdateSubnet(ChangeEventArgs args)
    {
        _subnetSelection = args.Value.ToString();
        Search();
    }


    private void Search()
    {
        if (!_subnetSelection.Equals("all"))
        {
            filteredBoxes = boxes.Where(o => o.Subnet != null && o.Subnet.Equals(_subnetSelection)).ToList();

        }
        else
        {
            filteredBoxes = boxes.ToList();
        }

        if (!string.IsNullOrEmpty(_searchText))
        {
            if (_searchType == SearchTypes.Contains)
            {
                switch (_searchCategory)
                {
                    case SearchCategory.Port:
                        filteredBoxes = filteredBoxes.Where(o => o.Services.Any(i => i.Port.ToString().Contains(_searchText))).ToList();
                        break;
                    case SearchCategory.Name:
                        filteredBoxes = filteredBoxes.Where(o => o.Services.Any(i => i.Name != null && i.Name.ToString().Contains(_searchText))).ToList();
                        break;
                    case SearchCategory.Script:
                        filteredBoxes = filteredBoxes.Where(o => o.Services.Any(i => i.Script != null && i.Script.ToString().Contains(_searchText))).ToList();
                        break;
                    case SearchCategory.Version:
                        filteredBoxes = filteredBoxes.Where(o => o.Services.Any(i => i.Version != null && i.Version.ToString().Contains(_searchText))).ToList();
                        break;
                    case SearchCategory.Os:
                        filteredBoxes = filteredBoxes.Where(o => o.Os != null && o.Os.Contains(_searchText)).ToList();
                        break;
                }
            }
            else if (_searchType == SearchTypes.Match)
            {
                switch (_searchCategory)
                {
                    case SearchCategory.Port:
                        filteredBoxes = filteredBoxes.Where(o => o.Services.Any(i => i.Port.ToString().Equals(_searchText))).ToList();
                        break;
                    case SearchCategory.Name:
                        filteredBoxes = filteredBoxes.Where(o => o.Services.Any(i => i.Name != null && i.Name.ToString().Equals(_searchText))).ToList();
                        break;
                    case SearchCategory.Script:
                        filteredBoxes = filteredBoxes.Where(o => o.Services.Any(i => i.Script != null && i.Script.ToString().Equals(_searchText))).ToList();
                        break;
                    case SearchCategory.Version:
                        filteredBoxes = filteredBoxes.Where(o => o.Services.Any(i => i.Version != null && i.Version.ToString().Equals(_searchText))).ToList();
                        break;
                    case SearchCategory.Os:
                        filteredBoxes = filteredBoxes.Where(o => o.Os != null && o.Os.Equals(_searchText)).ToList();
                        break;
                }
            }
        }
        StateHasChanged();


        //Console.WriteLine("hello");

        /**
        if (_searchType == SearchTypes.Contains)
        {

        }
        else if (_searchType == SearchTypes.Match)
        {

        }
        **/
    }

    private async Task DeleteBox()
    {
        await Http.DeleteAsync(requestUri);
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavigationManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime _JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
