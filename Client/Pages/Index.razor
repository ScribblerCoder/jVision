@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using jVision.Shared.Models 
@using BlazorTable
<h1>Box Count: @boxes.Count()</h1>

<button class="btn btn-success" @onclick="AddBox">Click me!</button>
<button class="btn btn-success" @onclick="DeleteBox">Delete All</button>
@if (boxes == null)
{
    <p><em>Loading...</em></p>
}
else
{
<Key></Key>
<Accordion @ref="_accordion" id="ac1" ActiveCollapsePanel="@_activePanel" OnCollapsePanelChanged="OnAccordionChanged" >
    <CollapsePanels>
        @foreach (var box in boxes)
        {

            <CollapsePanel style="margin-bottom: 10px;" CollapsedColor="@_accordionCollapsedColor" ExpandedColor="@_accordionExpandedColor" HoverColor="@_accordionHoverColor"  Animate="@_isAnimated" ShowContentOverflow="true"  ContentHeight="0">
                <CollapsedHeaderContent>
                    <div class="w-100">
                        <h5>@box.Hostname | @box.Ip</h5>
                        <button class="btn btn-success">Click meh</button>
                        <span class="fa fa-lg fa-chevron-circle-down" aria-hidden="true"></span>
                    </div>
                </CollapsedHeaderContent>
                <ExpandedHeaderContent>
                    <div class="w-100">
                        <h5>@box.Hostname | @box.Ip </h5>
                        <button class="btn btn-success">Click meh</button>
                        <span class="fa fa-lg fa-chevron-circle-up" aria-hidden="true"></span>
                    </div>
                </ExpandedHeaderContent>
                <Content>
                    <div style="border: 1px solid gray; height: 100%;">
                        <h4><b>Hostname: </b>@box.Hostname</h4>
                        <h4><b>Ip: </b>@box.Ip</h4>
                        <h4><b>Os: </b> @box.Os</h4>
                        <br />
                        <Table TableItem="ServiceDTO" Items="box.Services" PageSize="15" ColumnReorder="true" >
                            <Column TableItem="ServiceDTO" Title="Port" Field="@(x => x.Port)" Sortable="true" Filterable="true" Width="10%" />
                            <Column TableItem="ServiceDTO" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" Width="20%" />
                            <Column TableItem="ServiceDTO" Title="Protocol" Field="@(x => x.Protocol)" Sortable="true" Filterable="true" Width="20%" />
                            <Column TableItem="ServiceDTO" Title="State" Field="@(x => x.State)" Sortable="true" Filterable="true" Width="20%">
                            </Column>
                            <Column TableItem="ServiceDTO" Title="Version" Field="@(x => x.Version)" Sortable="true" Filterable="true" Width="10%" />
                            <Column TableItem="ServiceDTO" Title="Script" Field="@(x => x.Script)" Sortable="true" Filterable="true" Width="10%" Format="C" Align="Align.Right" />
                            <Pager ShowPageNumber="true" ShowTotalCount="true" />
                        </Table>
                    </div>
                </Content>
            </CollapsePanel>
        }
        @error
    </CollapsePanels>
</Accordion>
}

@code {
    [Inject] public HttpClient Http { get; set; }


    //Collapse
    
    private string _collapsedColor = "DodgerBlue";
    private string _expandedColor = "LightBlue";
    private string _hoverColor = "LightGray";
    private bool _isAnimated = false;
    private bool _isCollapseDisabled = false;
    private bool _isCollapsed = false;
    private bool _showOverflow = false;
    private int _height = 200;

    //Accordion
    private string _accordionCollapsedColor = "green";
    private string _accordionExpandedColor = "lightGreen";
    private string _accordionHoverColor = "lime";
    private bool _isAccordionDisabled = false;
    private int _collapseCount;

    private Accordion _accordion;
    private CollapsePanel? _activePanel;
    private IList<BoxDTO> boxes = new List<BoxDTO>();
    //private IList<ServiceDTO> services = new List<ServiceDTO>();
    private IList<BoxDTO> boxesAdded = new List<BoxDTO>();
    private IList<ServiceDTO> servicesAdded = new List<ServiceDTO>();
    public string hello = "hello";
    private string error;
    private string requestUri = "Box";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            boxes = await Http.GetFromJsonAsync<IList<BoxDTO>>(requestUri);
        } catch (Exception)
        {
            error = "Error Encountered";
        };
    }

    private void OnAccordionChanged(CollapsePanel? active)
    {
        _activePanel = active;
        var index = _accordion.CollapsePanelItems.ToList().IndexOf(active);

    }

    private void OnCollapsed(bool state)
    {
        _isCollapsed = state;
    }

    private async Task AddBox()
    {
        Console.WriteLine("anyuthing");
        ServiceDTO newService = new ServiceDTO
        {
            Port = 23,
            State = true,
            Name = "telnet"
        };
        servicesAdded.Add(newService);
        servicesAdded.Add(newService);
        BoxDTO newBox = new BoxDTO
        {
            Ip = "192.168.1.1",
            UserName = "jbrick123",
            Hostname = "Hostname",
            State = false,
            Comments = "none",
            Active = false,
            Pwned = false,
            Unrelated = false,
            Comeback = false,
            Os = "Linux",
            Cidr = "/24",
            Services = servicesAdded
        };
        boxesAdded.Add(newBox);
        var response = await Http.PostAsJsonAsync(requestUri, boxesAdded);
        Console.WriteLine(response);

    }

    private async Task DeleteBox()
    {
        await Http.DeleteAsync(requestUri);
    }
}

