@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using jVision.Shared.Models 
@using System.Collections.Generic
@using BlazorTable
<h1>Box Count: @boxes.Count()</h1>

<button class="btn btn-success" @onclick="AddBox">Click me!</button>
<button class="btn btn-success" @onclick="DeleteBox">Delete All</button>
@if (boxes == null)
{
    <p><em>Loading...</em></p>
}
else
{
<Key></Key>
//DROPDOWN

<label for="category">Select a Category</label>
<select name="category" class="form-control selectpicker " value="@_searchCategory" @onchange="UpdateCategory">
    @foreach (var item in Enum.GetValues(typeof(SearchCategory)))
        {
            <option value="@item">@item</option>
        }
</select>

<label for="type">Select a Filter Type</label>
<select name="type"  class="form-control selectpicker " value="@_searchType" @onchange="UpdateType">
    @foreach (var item in Enum.GetValues(typeof(SearchTypes)))
            {
                <option value="@item">@item</option>
            }
</select>

<select name="subnet" class="form-control selectpicker" value="@_subnet"
////////////////////
///

//SEARCHBAR
<input class="boarder-4 w-25 rounded col-sm-6 p-6 h-8" value="@_searchText" @oninput="UpdateSearchText" placeholder="Search" />

<Accordion @ref="_accordion" id="ac1" ActiveCollapsePanel="@_activePanel" OnCollapsePanelChanged="OnAccordionChanged" >
    <CollapsePanels>
        @foreach (var box in filteredBoxes)
        {

            <CollapsePanel style="margin-bottom: 10px;" CollapsedColor="@_accordionCollapsedColor" ExpandedColor="@_accordionExpandedColor" HoverColor="@_accordionHoverColor"  Animate="@_isAnimated" ShowContentOverflow="true"  ContentHeight="0">
                <CollapsedHeaderContent>
                    <div class="w-100">
                        <h5>@box.Hostname | @box.Ip</h5>
                        <button @onclick:stopPropagation="true" @onclick:preventDefault="true" class="btn btn-success">Click me</button>
                        <h4>Assigned to @box.UserName</h4>
                        <span class="fa fa-lg fa-chevron-circle-down" aria-hidden="true"></span>
                    </div>
                </CollapsedHeaderContent>
                <ExpandedHeaderContent>
                    <div class="w-100">
                        <h5>@box.Hostname | @box.Ip </h5>
                        <button class="btn btn-success">Opened</button>
                        <span class="fa fa-lg fa-chevron-circle-up" aria-hidden="true"></span>
                    </div>
                </ExpandedHeaderContent>
                <Content>
                    <div style="border: 1px solid gray; height: 100%;">
                        <h4><b>Hostname: </b>@box.Hostname</h4>
                        <h4><b>Ip: </b>@box.Ip</h4>
                        <h4><b>Os: </b> @box.Os</h4>
                        <br />
                        <Table TableItem="ServiceDTO" Items="box.Services" PageSize="15" ColumnReorder="true" >
                            <Column TableItem="ServiceDTO" Title="Port" Field="@(x => x.Port)" Sortable="true" Filterable="true" Width="10%" />
                            <Column TableItem="ServiceDTO" Title="Name" Field="@(x => x.Name)" Sortable="true" Filterable="true" Width="20%" />
                            <Column TableItem="ServiceDTO" Title="Protocol" Field="@(x => x.Protocol)" Sortable="true" Filterable="true" Width="20%" />
                            <Column TableItem="ServiceDTO" Title="State" Field="@(x => x.State)" Sortable="true" Filterable="true" Width="20%">
                            </Column>
                            <Column TableItem="ServiceDTO" Title="Version" Field="@(x => x.Version)" Sortable="true" Filterable="true" Width="10%" />
                            <Column TableItem="ServiceDTO" Title="Script" Field="@(x => x.Script)" Sortable="true" Filterable="true" Width="10%" Format="C" Align="Align.Right" />
                            <Pager ShowPageNumber="true" ShowTotalCount="true" />
                        </Table>
                    </div>
                </Content>
            </CollapsePanel>
        }
        @error
    </CollapsePanels>
</Accordion>
}

@code {
    [Inject] public HttpClient Http { get; set; }


    //searchtext
    private string _searchText = "";
    //dropdown
    private SearchTypes _searchType = SearchTypes.Contains;
    private SearchCategory _searchCategory = SearchCategory.Port;
    private string[] _subnets;
    private enum SearchCategory
    {
        Port,
        Name,
        Script,
        Version
    }
    private enum SearchTypes
    {
        Contains,
        Match
    }

    //Collapse

    private string _collapsedColor = "DodgerBlue";
    private string _expandedColor = "LightBlue";
    private string _hoverColor = "LightGray";
    private bool _isAnimated = false;
    private bool _isCollapseDisabled = false;
    private bool _isCollapsed = false;
    private bool _showOverflow = false;
    private int _height = 200;

    //Accordion
    private string _accordionCollapsedColor = "green";
    private string _accordionExpandedColor = "lightGreen";
    private string _accordionHoverColor = "lime";
    private bool _isAccordionDisabled = false;
    private int _collapseCount;

    private Accordion _accordion;
    private CollapsePanel? _activePanel;
    private IList<BoxDTO> boxes = new List<BoxDTO>();
    // private IList<BoxDTO> filteredBoxes = new List<BoxDTO>();
    //private IList<BoxDTO> filteredBoxes = new List<BoxDTO>();
    //private IList<ServiceDTO> services = new List<ServiceDTO>();
    private IList<BoxDTO> boxesAdded = new List<BoxDTO>();
    private IList<ServiceDTO> servicesAdded = new List<ServiceDTO>();
    private IList<BoxDTO> filteredBoxes = new List<BoxDTO>();

    public string hello = "hello";
    private string error;
    private string requestUri = "Box";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            boxes = await Http.GetFromJsonAsync<IList<BoxDTO>>(requestUri);
            _subnets = boxes.SelectMany(s => s.Services).ToList();
            filteredBoxes = new List<BoxDTO>(boxes);
        } catch (Exception)
        {
            error = "Error Encountered";
        };
    }










    //s => s.Services
    //.Where(p => p.Port.ToString().Contains(_searchText)).ToList())
    //.ToList();
    private void OnAccordionChanged(CollapsePanel? active)
    {
        _activePanel = active;
        var index = _accordion.CollapsePanelItems.ToList().IndexOf(active);

    }

    private void OnCollapsed(bool state)
    {
        _isCollapsed = state;
    }



    private async Task AddBox()
    {
        Console.WriteLine("anyuthing");
        ServiceDTO newService = new ServiceDTO
        {
            Port = 53,
            State = false,
            Name = null,
            Version = null,
            Script = "ooo"
        };
        servicesAdded.Add(newService);
        servicesAdded.Add(newService);
        BoxDTO newBox = new BoxDTO
        {
            Ip = "192.168.1.1",
            UserName = "jbrick123",
            Hostname = "Hostname",
            State = false,
            Comments = "none",
            Active = false,
            Pwned = false,
            Unrelated = false,
            Comeback = false,
            Os = "Linux",
            Cidr = "/24",
            Services = servicesAdded
        };
        boxesAdded.Add(newBox);
        var response = await Http.PostAsJsonAsync(requestUri, boxesAdded);
        Console.WriteLine(response);

    }

    private void OnInput()
    {
        Console.WriteLine("test");
    }
    private void UpdateSearchText(ChangeEventArgs args)
    {
        _searchText = args.Value.ToString();
        Search();
    }

    private void UpdateCategory(ChangeEventArgs args)
    {
        _searchCategory = (SearchCategory)Enum.Parse(typeof(SearchCategory), args.Value.ToString(), true);
        Search();
    }

    private void UpdateType(ChangeEventArgs args)
    {
        _searchType = (SearchTypes)Enum.Parse(typeof(SearchTypes), args.Value.ToString(), true);
        Search();
    }

    private void Search()
    {
        if(!string.IsNullOrEmpty(_searchText))
        {
            if (_searchType == SearchTypes.Contains)
            {
                switch (_searchCategory)
                {
                    case SearchCategory.Port:
                        filteredBoxes = boxes.Where(o => o.Services.Any(i => i.Port.ToString().Contains(_searchText))).ToList();
                        StateHasChanged();
                        break;
                    case SearchCategory.Name:
                        filteredBoxes = boxes.Where(o => o.Services.Any(i => i.Name != null && i.Name.ToString().Contains(_searchText))).ToList();
                        StateHasChanged();
                        break;
                    case SearchCategory.Script:
                        filteredBoxes = boxes.Where(o => o.Services.Any(i => i.Script != null && i.Script.ToString().Contains(_searchText))).ToList();
                        StateHasChanged();
                        break;
                    case SearchCategory.Version:
                        filteredBoxes = boxes.Where(o => o.Services.Any(i => i.Version != null && i.Version.ToString().Contains(_searchText))).ToList();
                        StateHasChanged();
                        break;
                }
            }
            else if (_searchType == SearchTypes.Match)
            {
                switch (_searchCategory)
                {
                    case SearchCategory.Port:
                        filteredBoxes = boxes.Where(o => o.Services.Any(i => i.Port.ToString().Equals(_searchText))).ToList();
                        StateHasChanged();
                        break;
                    case SearchCategory.Name:
                        filteredBoxes = boxes.Where(o => o.Services.Any(i => i.Name != null && i.Name.ToString().Equals(_searchText))).ToList();
                        StateHasChanged();
                        break;
                    case SearchCategory.Script:
                        filteredBoxes = boxes.Where(o => o.Services.Any(i => i.Script != null && i.Script.ToString().Equals(_searchText))).ToList();
                        StateHasChanged();
                        break;
                    case SearchCategory.Version:
                        filteredBoxes = boxes.Where(o => o.Services.Any(i => i.Version != null && i.Version.ToString().Equals(_searchText))).ToList();
                        StateHasChanged();
                        break;
                }
            }
        } else
        {
            filteredBoxes = boxes.ToList();
            StateHasChanged();
        }


        //Console.WriteLine("hello");

        /**
        if (_searchType == SearchTypes.Contains)
        {

        }
        else if (_searchType == SearchTypes.Match)
        {

        }
        **/
    }

    private async Task DeleteBox()
    {
        await Http.DeleteAsync(requestUri);
    }
}

